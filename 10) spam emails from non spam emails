import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import Perceptron
from sklearn.metrics import classification_report, accuracy_score

# Sample dataset (replace with your actual email dataset)
emails = [
    "Win money now!",  # Spam
    "Hello, how are you?",  # Non-spam
    "Claim your free prize!",  # Spam
    "Meeting at 10 AM tomorrow.",  # Non-spam
    "Lowest prices guaranteed!",  # Spam
    "Please find attached the report.",  # Non-spam
]
labels = [1, 0, 1, 0, 1, 0]  # 1 = Spam, 0 = Non-spam

# Convert text data into feature vectors using CountVectorizer
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(emails).toarray()  # Convert text to a matrix of token counts
y = np.array(labels)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Build and train the perceptron model
model = Perceptron(max_iter=1000, eta0=0.01, random_state=42)
model.fit(X_train, y_train)

# Predict on the test set
y_pred = model.predict(X_test)

# Evaluate the model
print("Classification Report:")
print(classification_report(y_test, y_pred))

accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")

# Test the model with a new email
test_email = ["Congratulations! You have won a lottery."]  # New email
test_email_features = vectorizer.transform(test_email).toarray()  # Convert to features
test_email_scaled = scaler.transform(test_email_features)  # Scale the features
prediction = model.predict(test_email_scaled)
print(f"The email '{test_email[0]}' is classified as: {'Spam' if prediction[0] == 1 else 'Non-Spam'}")
