import numpy as np 
class Perceptron:
    def init (self, input_size): 
        self.weights = np.zeros(input_size) 
        self.bias = 0
    def predict(self, inputs):
        activation = np.dot(self.weights, inputs) + self.bias 
        return 1 if activation > 0 else 0
    def train(self, inputs, targets, learning_rate=0.1, epochs=100): 
        for _ in range(epochs):
            for x, y in zip(inputs, targets): 
                prediction = self.predict(x) 
                error = y - prediction
                self.weights += learning_rate * error * x 
                self.bias += learning_rate * error
    def main():
    # Define input data for two classes 
        
    class_0 = np.array([[1, 1], [2, 1], [1, 2]])
    class_1 = np.array([[4, 5], [5, 6], [6, 5]])
    
    # Combine and label data (0 for class_0, 1 for class_1)
    inputs = np.vstack((class_0, class_1)) 
    targets = np.array([0, 0, 0, 1, 1, 1])
    # Create perceptron
    perceptron = Perceptron(input_size=2)
    # Train perceptron
    perceptron.train(inputs, targets, learning_rate=0.1, epochs=50)
    # Test the perceptron with new data
    test_data = np.array([[3, 3], [1, 0], [6, 7]])
    print("Testing trained perceptron:") 
    for data in test_data:
        prediction = perceptron.predict(data)
        print(f"Input: {data}, Predicted class: {prediction}")
    if name == " main ": 
    main()
